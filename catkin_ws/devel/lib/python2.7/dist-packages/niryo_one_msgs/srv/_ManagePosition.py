# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from niryo_one_msgs/ManagePositionRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import niryo_one_msgs.msg

class ManagePositionRequest(genpy.Message):
  _md5sum = "7489689e7c0b61df395f1006b4d834d9"
  _type = "niryo_one_msgs/ManagePositionRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 cmd_type

string position_name
niryo_one_msgs/Position position


================================================================================
MSG: niryo_one_msgs/Position
string name

float64[] joints 
niryo_one_msgs/RPY rpy
geometry_msgs/Point point
geometry_msgs/Quaternion quaternion


================================================================================
MSG: niryo_one_msgs/RPY
# roll, pitch and yaw

float64 roll
float64 pitch
float64 yaw

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['cmd_type','position_name','position']
  _slot_types = ['int32','string','niryo_one_msgs/Position']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cmd_type,position_name,position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ManagePositionRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cmd_type is None:
        self.cmd_type = 0
      if self.position_name is None:
        self.position_name = ''
      if self.position is None:
        self.position = niryo_one_msgs.msg.Position()
    else:
      self.cmd_type = 0
      self.position_name = ''
      self.position = niryo_one_msgs.msg.Position()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.cmd_type
      buff.write(_get_struct_i().pack(_x))
      _x = self.position_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.position.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.position.joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.position.joints))
      _x = self
      buff.write(_get_struct_10d().pack(_x.position.rpy.roll, _x.position.rpy.pitch, _x.position.rpy.yaw, _x.position.point.x, _x.position.point.y, _x.position.point.z, _x.position.quaternion.x, _x.position.quaternion.y, _x.position.quaternion.z, _x.position.quaternion.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = niryo_one_msgs.msg.Position()
      end = 0
      start = end
      end += 4
      (self.cmd_type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.position_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.position_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.position.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.position.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.position.joints = s.unpack(str[start:end])
      _x = self
      start = end
      end += 80
      (_x.position.rpy.roll, _x.position.rpy.pitch, _x.position.rpy.yaw, _x.position.point.x, _x.position.point.y, _x.position.point.z, _x.position.quaternion.x, _x.position.quaternion.y, _x.position.quaternion.z, _x.position.quaternion.w,) = _get_struct_10d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.cmd_type
      buff.write(_get_struct_i().pack(_x))
      _x = self.position_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.position.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.position.joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position.joints.tostring())
      _x = self
      buff.write(_get_struct_10d().pack(_x.position.rpy.roll, _x.position.rpy.pitch, _x.position.rpy.yaw, _x.position.point.x, _x.position.point.y, _x.position.point.z, _x.position.quaternion.x, _x.position.quaternion.y, _x.position.quaternion.z, _x.position.quaternion.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = niryo_one_msgs.msg.Position()
      end = 0
      start = end
      end += 4
      (self.cmd_type,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.position_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.position_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.position.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.position.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.position.joints = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 80
      (_x.position.rpy.roll, _x.position.rpy.pitch, _x.position.rpy.yaw, _x.position.point.x, _x.position.point.y, _x.position.point.z, _x.position.quaternion.x, _x.position.quaternion.y, _x.position.quaternion.z, _x.position.quaternion.w,) = _get_struct_10d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10d = None
def _get_struct_10d():
    global _struct_10d
    if _struct_10d is None:
        _struct_10d = struct.Struct("<10d")
    return _struct_10d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from niryo_one_msgs/ManagePositionResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import niryo_one_msgs.msg

class ManagePositionResponse(genpy.Message):
  _md5sum = "0bfc71def0391c7cb33d092741f6f696"
  _type = "niryo_one_msgs/ManagePositionResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 status
string message

niryo_one_msgs/Position position


================================================================================
MSG: niryo_one_msgs/Position
string name

float64[] joints 
niryo_one_msgs/RPY rpy
geometry_msgs/Point point
geometry_msgs/Quaternion quaternion


================================================================================
MSG: niryo_one_msgs/RPY
# roll, pitch and yaw

float64 roll
float64 pitch
float64 yaw

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['status','message','position']
  _slot_types = ['int32','string','niryo_one_msgs/Position']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,message,position

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ManagePositionResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
      if self.message is None:
        self.message = ''
      if self.position is None:
        self.position = niryo_one_msgs.msg.Position()
    else:
      self.status = 0
      self.message = ''
      self.position = niryo_one_msgs.msg.Position()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.status
      buff.write(_get_struct_i().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.position.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.position.joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.position.joints))
      _x = self
      buff.write(_get_struct_10d().pack(_x.position.rpy.roll, _x.position.rpy.pitch, _x.position.rpy.yaw, _x.position.point.x, _x.position.point.y, _x.position.point.z, _x.position.quaternion.x, _x.position.quaternion.y, _x.position.quaternion.z, _x.position.quaternion.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = niryo_one_msgs.msg.Position()
      end = 0
      start = end
      end += 4
      (self.status,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.position.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.position.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.position.joints = s.unpack(str[start:end])
      _x = self
      start = end
      end += 80
      (_x.position.rpy.roll, _x.position.rpy.pitch, _x.position.rpy.yaw, _x.position.point.x, _x.position.point.y, _x.position.point.z, _x.position.quaternion.x, _x.position.quaternion.y, _x.position.quaternion.z, _x.position.quaternion.w,) = _get_struct_10d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.status
      buff.write(_get_struct_i().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.position.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.position.joints)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.position.joints.tostring())
      _x = self
      buff.write(_get_struct_10d().pack(_x.position.rpy.roll, _x.position.rpy.pitch, _x.position.rpy.yaw, _x.position.point.x, _x.position.point.y, _x.position.point.z, _x.position.quaternion.x, _x.position.quaternion.y, _x.position.quaternion.z, _x.position.quaternion.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = niryo_one_msgs.msg.Position()
      end = 0
      start = end
      end += 4
      (self.status,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.position.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.position.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.position.joints = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 80
      (_x.position.rpy.roll, _x.position.rpy.pitch, _x.position.rpy.yaw, _x.position.point.x, _x.position.point.y, _x.position.point.z, _x.position.quaternion.x, _x.position.quaternion.y, _x.position.quaternion.z, _x.position.quaternion.w,) = _get_struct_10d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_10d = None
def _get_struct_10d():
    global _struct_10d
    if _struct_10d is None:
        _struct_10d = struct.Struct("<10d")
    return _struct_10d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
class ManagePosition(object):
  _type          = 'niryo_one_msgs/ManagePosition'
  _md5sum = 'adf4e061b0eee7a4afcbede59727e52a'
  _request_class  = ManagePositionRequest
  _response_class = ManagePositionResponse
