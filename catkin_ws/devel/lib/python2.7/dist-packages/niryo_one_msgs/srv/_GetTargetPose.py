# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from niryo_one_msgs/GetTargetPoseRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class GetTargetPoseRequest(genpy.Message):
  _md5sum = "102311ad973ac34de88eb133d488960a"
  _type = "niryo_one_msgs/GetTargetPoseRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string GRIP_AUTO = auto

string workspace
string grip
int32 tool_id
float32 height_offset
float32 x_rel
float32 y_rel
float32 yaw_rel
"""
  # Pseudo-constants
  GRIP_AUTO = 'auto'

  __slots__ = ['workspace','grip','tool_id','height_offset','x_rel','y_rel','yaw_rel']
  _slot_types = ['string','string','int32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       workspace,grip,tool_id,height_offset,x_rel,y_rel,yaw_rel

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetTargetPoseRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.workspace is None:
        self.workspace = ''
      if self.grip is None:
        self.grip = ''
      if self.tool_id is None:
        self.tool_id = 0
      if self.height_offset is None:
        self.height_offset = 0.
      if self.x_rel is None:
        self.x_rel = 0.
      if self.y_rel is None:
        self.y_rel = 0.
      if self.yaw_rel is None:
        self.yaw_rel = 0.
    else:
      self.workspace = ''
      self.grip = ''
      self.tool_id = 0
      self.height_offset = 0.
      self.x_rel = 0.
      self.y_rel = 0.
      self.yaw_rel = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.workspace
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.grip
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i4f().pack(_x.tool_id, _x.height_offset, _x.x_rel, _x.y_rel, _x.yaw_rel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.workspace = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.workspace = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.grip = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.grip = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.tool_id, _x.height_offset, _x.x_rel, _x.y_rel, _x.yaw_rel,) = _get_struct_i4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.workspace
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.grip
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_i4f().pack(_x.tool_id, _x.height_offset, _x.x_rel, _x.y_rel, _x.yaw_rel))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.workspace = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.workspace = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.grip = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.grip = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.tool_id, _x.height_offset, _x.x_rel, _x.y_rel, _x.yaw_rel,) = _get_struct_i4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_i4f = None
def _get_struct_i4f():
    global _struct_i4f
    if _struct_i4f is None:
        _struct_i4f = struct.Struct("<i4f")
    return _struct_i4f
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from niryo_one_msgs/GetTargetPoseResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import niryo_one_msgs.msg

class GetTargetPoseResponse(genpy.Message):
  _md5sum = "9b7a24f6dc34ac098e250d656dd24cb1"
  _type = "niryo_one_msgs/GetTargetPoseResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 status
string message
niryo_one_msgs/RobotState target_pose


================================================================================
MSG: niryo_one_msgs/RobotState

geometry_msgs/Point position
niryo_one_msgs/RPY rpy

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: niryo_one_msgs/RPY
# roll, pitch and yaw

float64 roll
float64 pitch
float64 yaw
"""
  __slots__ = ['status','message','target_pose']
  _slot_types = ['int32','string','niryo_one_msgs/RobotState']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       status,message,target_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetTargetPoseResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.status is None:
        self.status = 0
      if self.message is None:
        self.message = ''
      if self.target_pose is None:
        self.target_pose = niryo_one_msgs.msg.RobotState()
    else:
      self.status = 0
      self.message = ''
      self.target_pose = niryo_one_msgs.msg.RobotState()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.status
      buff.write(_get_struct_i().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.target_pose.position.x, _x.target_pose.position.y, _x.target_pose.position.z, _x.target_pose.rpy.roll, _x.target_pose.rpy.pitch, _x.target_pose.rpy.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.target_pose is None:
        self.target_pose = niryo_one_msgs.msg.RobotState()
      end = 0
      start = end
      end += 4
      (self.status,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.target_pose.position.x, _x.target_pose.position.y, _x.target_pose.position.z, _x.target_pose.rpy.roll, _x.target_pose.rpy.pitch, _x.target_pose.rpy.yaw,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.status
      buff.write(_get_struct_i().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6d().pack(_x.target_pose.position.x, _x.target_pose.position.y, _x.target_pose.position.z, _x.target_pose.rpy.roll, _x.target_pose.rpy.pitch, _x.target_pose.rpy.yaw))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.target_pose is None:
        self.target_pose = niryo_one_msgs.msg.RobotState()
      end = 0
      start = end
      end += 4
      (self.status,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.target_pose.position.x, _x.target_pose.position.y, _x.target_pose.position.z, _x.target_pose.rpy.roll, _x.target_pose.rpy.pitch, _x.target_pose.rpy.yaw,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
class GetTargetPose(object):
  _type          = 'niryo_one_msgs/GetTargetPose'
  _md5sum = 'dc01ee317d0bd0fbdd3c0d39de43fdb8'
  _request_class  = GetTargetPoseRequest
  _response_class = GetTargetPoseResponse
