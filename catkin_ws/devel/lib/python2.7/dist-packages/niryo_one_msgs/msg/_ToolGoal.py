# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from niryo_one_msgs/ToolGoal.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import niryo_one_msgs.msg

class ToolGoal(genpy.Message):
  _md5sum = "c773218b26dbc38b2561cc0aa2e21da9"
  _type = "niryo_one_msgs/ToolGoal"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# goal
niryo_one_msgs/ToolCommand cmd

================================================================================
MSG: niryo_one_msgs/ToolCommand

uint8 tool_id
uint8 cmd_type

# if gripper close
uint16 gripper_close_speed

# if gripper open
uint16 gripper_open_speed

# if vacuum pump or electromagnet grove
bool activate

# if tool is set by digital outputs (electromagnet)
uint8 gpio

"""
  __slots__ = ['cmd']
  _slot_types = ['niryo_one_msgs/ToolCommand']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       cmd

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ToolGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.cmd is None:
        self.cmd = niryo_one_msgs.msg.ToolCommand()
    else:
      self.cmd = niryo_one_msgs.msg.ToolCommand()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B2H2B().pack(_x.cmd.tool_id, _x.cmd.cmd_type, _x.cmd.gripper_close_speed, _x.cmd.gripper_open_speed, _x.cmd.activate, _x.cmd.gpio))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cmd is None:
        self.cmd = niryo_one_msgs.msg.ToolCommand()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.cmd.tool_id, _x.cmd.cmd_type, _x.cmd.gripper_close_speed, _x.cmd.gripper_open_speed, _x.cmd.activate, _x.cmd.gpio,) = _get_struct_2B2H2B().unpack(str[start:end])
      self.cmd.activate = bool(self.cmd.activate)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B2H2B().pack(_x.cmd.tool_id, _x.cmd.cmd_type, _x.cmd.gripper_close_speed, _x.cmd.gripper_open_speed, _x.cmd.activate, _x.cmd.gpio))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.cmd is None:
        self.cmd = niryo_one_msgs.msg.ToolCommand()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.cmd.tool_id, _x.cmd.cmd_type, _x.cmd.gripper_close_speed, _x.cmd.gripper_open_speed, _x.cmd.activate, _x.cmd.gpio,) = _get_struct_2B2H2B().unpack(str[start:end])
      self.cmd.activate = bool(self.cmd.activate)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B2H2B = None
def _get_struct_2B2H2B():
    global _struct_2B2H2B
    if _struct_2B2H2B is None:
        _struct_2B2H2B = struct.Struct("<2B2H2B")
    return _struct_2B2H2B
