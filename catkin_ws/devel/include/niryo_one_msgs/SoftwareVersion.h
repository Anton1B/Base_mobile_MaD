// Generated by gencpp from file niryo_one_msgs/SoftwareVersion.msg
// DO NOT EDIT!


#ifndef NIRYO_ONE_MSGS_MESSAGE_SOFTWAREVERSION_H
#define NIRYO_ONE_MSGS_MESSAGE_SOFTWAREVERSION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_one_msgs
{
template <class ContainerAllocator>
struct SoftwareVersion_
{
  typedef SoftwareVersion_<ContainerAllocator> Type;

  SoftwareVersion_()
    : rpi_image_version()
    , ros_niryo_one_version()
    , motor_names()
    , stepper_firmware_versions()  {
    }
  SoftwareVersion_(const ContainerAllocator& _alloc)
    : rpi_image_version(_alloc)
    , ros_niryo_one_version(_alloc)
    , motor_names(_alloc)
    , stepper_firmware_versions(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _rpi_image_version_type;
  _rpi_image_version_type rpi_image_version;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _ros_niryo_one_version_type;
  _ros_niryo_one_version_type ros_niryo_one_version;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _motor_names_type;
  _motor_names_type motor_names;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _stepper_firmware_versions_type;
  _stepper_firmware_versions_type stepper_firmware_versions;





  typedef boost::shared_ptr< ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator> const> ConstPtr;

}; // struct SoftwareVersion_

typedef ::niryo_one_msgs::SoftwareVersion_<std::allocator<void> > SoftwareVersion;

typedef boost::shared_ptr< ::niryo_one_msgs::SoftwareVersion > SoftwareVersionPtr;
typedef boost::shared_ptr< ::niryo_one_msgs::SoftwareVersion const> SoftwareVersionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace niryo_one_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'moveit_msgs': ['/opt/ros/kinetic/share/moveit_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'object_recognition_msgs': ['/opt/ros/kinetic/share/object_recognition_msgs/cmake/../msg'], 'octomap_msgs': ['/opt/ros/kinetic/share/octomap_msgs/cmake/../msg'], 'niryo_one_msgs': ['/home/chaire/catkin_ws/src/niryo_one_ros/niryo_one_msgs/msg', '/home/chaire/catkin_ws/devel/share/niryo_one_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "05cf59e59925f010abc41acd1944fec8";
  }

  static const char* value(const ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x05cf59e59925f010ULL;
  static const uint64_t static_value2 = 0xabc41acd1944fec8ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_one_msgs/SoftwareVersion";
  }

  static const char* value(const ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
string rpi_image_version\n\
string ros_niryo_one_version\n\
\n\
string[] motor_names\n\
string[] stepper_firmware_versions\n\
";
  }

  static const char* value(const ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.rpi_image_version);
      stream.next(m.ros_niryo_one_version);
      stream.next(m.motor_names);
      stream.next(m.stepper_firmware_versions);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SoftwareVersion_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_one_msgs::SoftwareVersion_<ContainerAllocator>& v)
  {
    s << indent << "rpi_image_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.rpi_image_version);
    s << indent << "ros_niryo_one_version: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.ros_niryo_one_version);
    s << indent << "motor_names[]" << std::endl;
    for (size_t i = 0; i < v.motor_names.size(); ++i)
    {
      s << indent << "  motor_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.motor_names[i]);
    }
    s << indent << "stepper_firmware_versions[]" << std::endl;
    for (size_t i = 0; i < v.stepper_firmware_versions.size(); ++i)
    {
      s << indent << "  stepper_firmware_versions[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.stepper_firmware_versions[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ONE_MSGS_MESSAGE_SOFTWAREVERSION_H
