// Generated by gencpp from file niryo_one_msgs/ManagePositionRequest.msg
// DO NOT EDIT!


#ifndef NIRYO_ONE_MSGS_MESSAGE_MANAGEPOSITIONREQUEST_H
#define NIRYO_ONE_MSGS_MESSAGE_MANAGEPOSITIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <niryo_one_msgs/Position.h>

namespace niryo_one_msgs
{
template <class ContainerAllocator>
struct ManagePositionRequest_
{
  typedef ManagePositionRequest_<ContainerAllocator> Type;

  ManagePositionRequest_()
    : cmd_type(0)
    , position_name()
    , position()  {
    }
  ManagePositionRequest_(const ContainerAllocator& _alloc)
    : cmd_type(0)
    , position_name(_alloc)
    , position(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _cmd_type_type;
  _cmd_type_type cmd_type;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _position_name_type;
  _position_name_type position_name;

   typedef  ::niryo_one_msgs::Position_<ContainerAllocator>  _position_type;
  _position_type position;





  typedef boost::shared_ptr< ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ManagePositionRequest_

typedef ::niryo_one_msgs::ManagePositionRequest_<std::allocator<void> > ManagePositionRequest;

typedef boost::shared_ptr< ::niryo_one_msgs::ManagePositionRequest > ManagePositionRequestPtr;
typedef boost::shared_ptr< ::niryo_one_msgs::ManagePositionRequest const> ManagePositionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace niryo_one_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'moveit_msgs': ['/opt/ros/kinetic/share/moveit_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'object_recognition_msgs': ['/opt/ros/kinetic/share/object_recognition_msgs/cmake/../msg'], 'octomap_msgs': ['/opt/ros/kinetic/share/octomap_msgs/cmake/../msg'], 'niryo_one_msgs': ['/home/chaire/catkin_ws/src/niryo_one_ros/niryo_one_msgs/msg', '/home/chaire/catkin_ws/devel/share/niryo_one_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7489689e7c0b61df395f1006b4d834d9";
  }

  static const char* value(const ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7489689e7c0b61dfULL;
  static const uint64_t static_value2 = 0x395f1006b4d834d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_one_msgs/ManagePositionRequest";
  }

  static const char* value(const ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 cmd_type\n\
\n\
string position_name\n\
niryo_one_msgs/Position position\n\
\n\
\n\
================================================================================\n\
MSG: niryo_one_msgs/Position\n\
string name\n\
\n\
float64[] joints \n\
niryo_one_msgs/RPY rpy\n\
geometry_msgs/Point point\n\
geometry_msgs/Quaternion quaternion\n\
\n\
\n\
================================================================================\n\
MSG: niryo_one_msgs/RPY\n\
# roll, pitch and yaw\n\
\n\
float64 roll\n\
float64 pitch\n\
float64 yaw\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cmd_type);
      stream.next(m.position_name);
      stream.next(m.position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManagePositionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_one_msgs::ManagePositionRequest_<ContainerAllocator>& v)
  {
    s << indent << "cmd_type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd_type);
    s << indent << "position_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.position_name);
    s << indent << "position: ";
    s << std::endl;
    Printer< ::niryo_one_msgs::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ONE_MSGS_MESSAGE_MANAGEPOSITIONREQUEST_H
