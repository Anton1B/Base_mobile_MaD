// Generated by gencpp from file niryo_one_msgs/SequenceAutorunStatus.msg
// DO NOT EDIT!


#ifndef NIRYO_ONE_MSGS_MESSAGE_SEQUENCEAUTORUNSTATUS_H
#define NIRYO_ONE_MSGS_MESSAGE_SEQUENCEAUTORUNSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace niryo_one_msgs
{
template <class ContainerAllocator>
struct SequenceAutorunStatus_
{
  typedef SequenceAutorunStatus_<ContainerAllocator> Type;

  SequenceAutorunStatus_()
    : enabled(false)
    , mode(0)
    , sequence_ids()  {
    }
  SequenceAutorunStatus_(const ContainerAllocator& _alloc)
    : enabled(false)
    , mode(0)
    , sequence_ids(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _enabled_type;
  _enabled_type enabled;

   typedef int32_t _mode_type;
  _mode_type mode;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _sequence_ids_type;
  _sequence_ids_type sequence_ids;





  typedef boost::shared_ptr< ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator> const> ConstPtr;

}; // struct SequenceAutorunStatus_

typedef ::niryo_one_msgs::SequenceAutorunStatus_<std::allocator<void> > SequenceAutorunStatus;

typedef boost::shared_ptr< ::niryo_one_msgs::SequenceAutorunStatus > SequenceAutorunStatusPtr;
typedef boost::shared_ptr< ::niryo_one_msgs::SequenceAutorunStatus const> SequenceAutorunStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace niryo_one_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'shape_msgs': ['/opt/ros/kinetic/share/shape_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'moveit_msgs': ['/opt/ros/kinetic/share/moveit_msgs/cmake/../msg'], 'trajectory_msgs': ['/opt/ros/kinetic/share/trajectory_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'object_recognition_msgs': ['/opt/ros/kinetic/share/object_recognition_msgs/cmake/../msg'], 'octomap_msgs': ['/opt/ros/kinetic/share/octomap_msgs/cmake/../msg'], 'niryo_one_msgs': ['/home/chaire/catkin_ws/src/niryo_one_ros/niryo_one_msgs/msg', '/home/chaire/catkin_ws/devel/share/niryo_one_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2fd70cfd773159456b3e0c9b23254bb4";
  }

  static const char* value(const ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2fd70cfd77315945ULL;
  static const uint64_t static_value2 = 0x6b3e0c9b23254bb4ULL;
};

template<class ContainerAllocator>
struct DataType< ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "niryo_one_msgs/SequenceAutorunStatus";
  }

  static const char* value(const ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool enabled\n\
int32 mode\n\
int32[] sequence_ids\n\
";
  }

  static const char* value(const ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enabled);
      stream.next(m.mode);
      stream.next(m.sequence_ids);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SequenceAutorunStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::niryo_one_msgs::SequenceAutorunStatus_<ContainerAllocator>& v)
  {
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
    s << indent << "mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.mode);
    s << indent << "sequence_ids[]" << std::endl;
    for (size_t i = 0; i < v.sequence_ids.size(); ++i)
    {
      s << indent << "  sequence_ids[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.sequence_ids[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // NIRYO_ONE_MSGS_MESSAGE_SEQUENCEAUTORUNSTATUS_H
